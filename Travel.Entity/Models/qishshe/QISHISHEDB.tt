<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data"#>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Common" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ output extension=".cs" #>

<#

	string Namespace="QiShiShe.Entity.Model";
	string RepoName="QISHISHEDB";
	string ConnectionStr="QiShiSheConnection";

    var builder = new T4Builder("Data Source=210.51.165.107;Initial Catalog=QISHISHE;MultipleActiveResultSets=True;user id=tladmin;password=fxtx2011@))(;");

#>

using QiShiShe.DDD.Config;
using PetaPoco.NetCore;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;

namespace <#=Namespace #>
{

	 public partial class <#=RepoName #> : Database
     {
        private static SqlConnection con;
        /// <summary>
        /// open the connection
        /// </summary>
        /// <returns></returns>
        private static SqlConnection OpenConnection()
        {
            if (con == null)
            {
                con = new SqlConnection(GetConn());
            }
            else
            {
                if (con.State == System.Data.ConnectionState.Closed)
                    con.Open();
            }
            return con;
        }

		private static string GetConn()
        {
            return JsonConfig.JsonRead("QISHISHEConnection");
        }

        private static SqlConnection OpenConnection(string name)
        {
            if (con == null)
            {
                con = new SqlConnection(JsonConfig.JsonRead(name));
            }
            else
            {
                if (con.State == System.Data.ConnectionState.Closed)
                    con.Open();
            }
            return con;
        }


        public <#=RepoName#>() : base(OpenConnection())
        {
            CommonConstruct();
        }

        public <#=RepoName#>(string connectionStringName) : base(OpenConnection(connectionStringName))
        {
            CommonConstruct();
        }

        partial void CommonConstruct();

        public interface IFactory
        {
            <#=RepoName #> GetInstance();
        }

        public static IFactory Factory { get; set; }
        public static <#=RepoName #> GetInstance()
        {
            if (_instance != null)
                return _instance;

            if (Factory != null)
                return Factory.GetInstance();
            else
                return new <#=RepoName #>();
        }

        [ThreadStatic] static <#=RepoName #> _instance;

        public override void OnBeginTransaction()
        {
            if (_instance == null)
                _instance = this;
        }

        public override void OnEndTransaction()
        {
            if (_instance == this)
                _instance = null;
        }

		public static int BulkUpdate<T>(string tableName, List<T> data, Func<T, string> funColumns) 
        {
            try
            {
			    using (SqlConnection conn = OpenConnection())
                {
                    conn.Open();

                    String sql = "";

                    foreach (var item in data)
                    {
                        sql += string.Format("UPDATE dbo.[{0}] SET {1} ;", tableName, funColumns(item));
                    }

                    SqlCommand comm = new SqlCommand()
                    {
                        CommandText = sql,
                        Connection = conn
                    };

                    return comm.ExecuteNonQuery();
                }
            }
            catch (Exception x)
            {
                throw x;
            }
        }

        public class Record<T> where T : new()
        {
            public static <#=RepoName #> repo { get { return <#=RepoName #>.GetInstance(); } }
            public bool IsNew() { return repo.IsNew(this); }
            public object Insert() { return repo.Insert(this); }

            public void Save() { repo.Save(this); }
            public int Update() { return repo.Update(this); }

            public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
            public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
            public static int Update(Sql sql) { return repo.Update<T>(sql); }
            public int Delete() { return repo.Delete(this); }
            public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
            public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
            public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
            public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
            public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
            public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
            public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
            public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
            public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
            public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
            public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
            public static T Single(Sql sql) { return repo.Single<T>(sql); }
            public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
            public static T First(Sql sql) { return repo.First<T>(sql); }
            public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
            public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }

            public static List<T> Fetch(int page, int itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }

            public static List<T> SkipTake(int skip, int take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
            public static List<T> SkipTake(int skip, int take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
            public static Page<T> Page(int page, int itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
            public static Page<T> Page(int page, int itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
            public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
            public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

        }

    }


<#
   foreach(var item in builder.Table)
   {
#>
	
	 [TableName("<#=item.TableName#>")]
	 <#
	 if(!String.IsNullOrWhiteSpace(item.Primkey))
	 {
	 #>
[PrimaryKey("<#=item.Primkey #>"<#=item.IsIdentity==true?")":", autoIncrement = false)"#>]
	 <#
	 }
	 #>
[ExplicitColumns]
     public partial class <#=item.TableNameStr#>:<#=RepoName#>.Record<<#=item.TableNameStr#>>
	 {
		
		<#
		foreach(var col in item.Column)
		{
		#>
[Column<#=col.ColumnAlias!=null?"(\""+col.ColumnName+"\")":"" #>] public <#=col.ColumnType#> <#= col.ColumnAlias!=null?col.ColumnAlias:col.ColumnName#> {get;set;}
		<#
		}
		#>

	 }
<#
   }
#>

}








<#+
   public class T4Builder
    {
        public List<String> TableList = new List<String>();

        public List<TableFrame> Table = new List<TableFrame>();

        public T4Builder(string conectionstring)
        {
            SqlConnection con = new SqlConnection(conectionstring);
            con.Open();

            SqlCommand cmd = new SqlCommand("select name from sysobjects where xtype='u'", con);
            var reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                var tablename = reader.GetValue(0).ToString();
                TableList.Add(tablename);
            }

            foreach (var tablename in TableList)
            {
                var TableFrame = new TableFrame();
                TableFrame.TableName = "dbo." + tablename;

                #region 获取主键
                SqlCommand cmd_prikey = new SqlCommand("EXEC sp_pkeys @table_name='" + tablename + "' ", con);
                var key_result = cmd_prikey.ExecuteReader();
                while (key_result.Read())
                {
                    TableFrame.Primkey = key_result.GetValue(3) != null ? key_result.GetValue(3).ToString() : null;
                }
                SqlCommand cmd_isIdentity = new SqlCommand(string.Format("select  is_identity as 'identity' from sys.columns where object_ID = object_ID('{0}') and name = '{1}'", tablename, TableFrame.Primkey), con);
                var identity_result = cmd_isIdentity.ExecuteReader();
                while (identity_result.Read())
                {
                    if (identity_result.GetValue(0) != null)
                    {
                        TableFrame.IsIdentity = identity_result.GetValue(0).ToString().ToLower() == "true" ? true : false;
                    }
                }
                #endregion

                #region 获取列名
                SqlCommand cmd_table = new SqlCommand("select COLUMN_NAME,DATA_TYPE,NUMERIC_SCALE,IS_NULLABLE from information_schema.columns where TABLE_NAME='" + tablename + "'", con);
                var table_result = cmd_table.ExecuteReader();
                List<Colum> Column = new List<Colum>();

                while (table_result.Read())
                {
                    Colum Columindex = new Colum();
                    Columindex.ColumnName = table_result.GetValue(0) != null ? table_result.GetValue(0).ToString() : null;
                    if (!String.IsNullOrEmpty(Columindex.ColumnName))
                    {
                        Columindex.ColumnAlias = tablename.ToString() == Columindex.ColumnName ? "_" + Columindex.ColumnName : null;
                        var ColumTypeStr = GetPropertyType(table_result.GetValue(1) != null ? table_result.GetValue(1).ToString() : null, table_result.GetValue(2) != null ? table_result.GetValue(2).ToString() : null);
                        if (table_result.GetValue(3).ToString() == "YES" && ColumTypeStr != "string" && ColumTypeStr != "Guid")
                        {
                            ColumTypeStr = ColumTypeStr + "?";
                        }

                        Columindex.ColumnType = ColumTypeStr;
                        Column.Add(Columindex);
                    }
                }
                #endregion

                TableFrame.Column = Column;
                Table.Add(TableFrame);
            }
            con.Close();
            con.Dispose();
        }

        private string GetPropertyType(string sqlType, string dataScale)
        {
            string sysType = "string";
            sqlType = sqlType.ToLower();
            switch (sqlType)
            {
                case "bigint":
                    sysType = "long";
                    break;
                case "smallint":
                    sysType = "short";
                    break;
                case "int":
                    sysType = "int";
                    break;
                case "uniqueidentifier":
                    sysType = "Guid";
                    break;
                case "smalldatetime":
                case "datetime":
                case "date":
                    sysType = "DateTime";
                    break;
                case "float":
                    sysType = "double";
                    break;
                case "real":
                case "numeric":
                case "smallmoney":
                case "decimal":
                case "money":
                case "number":
                    sysType = "decimal";
                    break;
                case "tinyint":
                    sysType = "byte";
                    break;
                case "bit":
                    sysType = "bool";
                    break;
                case "image":
                case "binary":
                case "varbinary":
                case "timestamp":
                    sysType = "byte[]";
                    break;
            }
            if (sqlType == "number" && dataScale == "0")
                return "long";

            return sysType;
        }
    }



   public class TableFrame
    {
        public string TableName { get; set; }

        public string Primkey { get; set; }

        public bool IsIdentity { get; set; }

        public List<Colum> Column { get; set; }

        public string TableNameStr
        {
            get
            {
                return TableName != null ? TableName.Replace("dbo.", "").Trim() : null;
            }
        }
    }

    public class Colum
    {
        public string ColumnName { get; set; }

        public string ColumnType { get; set; }

        public string ColumnAlias { get; set; }
    }
#>

